function net = cnn_OCT_init(DoRate,poolType, init_type,varargin)
% Function to initialize the network
% Taken from MatConvNet,modified to incorporate:
%    use of function norm regularization
%    model selection

opts.networkType = 'simplenn' ;
opts = vl_argparse(opts, varargin) ;

lr = [.1 2] ;

if strcmp(init_type, 'cifar')
    load('/home/amal-rt/Documents/Back-up-2/OCT_NN/net-cifar.mat');
    net.layers{end-1} = struct('type', 'conv', ...
        'weights', {{0.05*randn(1,1,64,2, 'single'), zeros(1,2,'single')}}, ...
        'learningRate', .1*lr, ...
        'stride', 1, ...
        'pad', 0) ;
else
    % Define network CIFAR10-quick
    net.layers = {} ;
    
    % Block 1
    net.layers{end+1} = struct('type', 'conv', ...
        'weights', {{randn(5,5,3,32, 'single'), zeros(1, 32, 'single')}}, ...
        'learningRate', lr, ...
        'stride', 1, ...
        'pad', 2) ;
    net.layers{end+1} = struct('type', 'pool', ...
        'method', 'max', ...
        'pool', [3 3], ...
        'stride', 2, ...
        'pad', [0 1 0 1]) ;
    net.layers{end+1} = struct('type', 'relu') ;
    if DoRate~=0
        net.layers{end+1} = struct('type', 'dropout', 'name', 'dropout1', 'rate', DoRate) ;
    end;
    
    % Block 2
    net.layers{end+1} = struct('type', 'conv', ...
        'weights', {{0.05*randn(5,5,32,32, 'single'), zeros(1,32,'single')}}, ...
        'learningRate', lr, ...
        'stride', 1, ...
        'pad', 2) ;
    if strcmp(poolType,'max')
        net.layers{end+1} = struct('type', 'pool', ...
            'method', poolType, ...
            'pool', [3 3], ...
            'stride', 2, ...
            'pad', [0 1 0 1]) ;
        net.layers{end+1} = struct('type', 'relu') ;
    else if strcmp(poolType,'avg')
            net.layers{end+1} = struct('type', 'relu') ;
            net.layers{end+1} = struct('type', 'pool', ...
                'method', poolType, ...
                'pool', [3 3], ...
                'stride', 2, ...
                'pad', [0 1 0 1]) ; % Emulate caffe
        else
            error('unknown pool type');
        end;
    end;
    if DoRate~=0
        net.layers{end+1} = struct('type', 'dropout', 'name', 'dropout2', 'rate', DoRate) ;
    end;
    
    % Block 3
    net.layers{end+1} = struct('type', 'conv', ...
        'weights', {{0.05*randn(5,5,32,64, 'single'), zeros(1,64,'single')}}, ...
        'learningRate', lr, ...
        'stride', 1, ...
        'pad', 2) ;
    if strcmp(poolType,'max')
        net.layers{end+1} = struct('type', 'pool', ...
            'method', poolType, ...
            'pool', [3 3], ...
            'stride', 2, ...
            'pad', [0 1 0 1]) ;
        net.layers{end+1} = struct('type', 'relu') ;
    else if strcmp(poolType,'avg')
            net.layers{end+1} = struct('type', 'relu') ;
            net.layers{end+1} = struct('type', 'pool', ...
                'method', poolType, ...
                'pool', [3 3], ...
                'stride', 2, ...
                'pad', [0 1 0 1]) ; % Emulate caffe
        else
            error('unknown pool type');
        end;
    end;
    if DoRate~=0
        net.layers{end+1} = struct('type', 'dropout', 'name', 'dropout3', 'rate', DoRate) ;
    end;
    
    % Block 4
    net.layers{end+1} = struct('type', 'conv', ...
        'weights', {{0.05*randn(4,4,64,64, 'single'), zeros(1,64,'single')}}, ...
        'learningRate', lr, ...
        'stride', 1, ...
        'pad', 0) ;
    net.layers{end+1} = struct('type', 'relu') ;
    if DoRate~=0
        net.layers{end+1} = struct('type', 'dropout', 'name', 'dropout4', 'rate', DoRate) ;
    end;
    
    % Block 5
    net.layers{end+1} = struct('type', 'conv', ...
        'weights', {{0.05*randn(1,1,64,2, 'single'), zeros(1,2,'single')}}, ...
        'learningRate', .1*lr, ...
        'stride', 1, ...
        'pad', 0) ;
    
    % Loss layer
    net.layers{end+1} = struct('type', 'softmaxloss') ;
end;
% Meta parameters
net.meta.inputSize = [32 32 3] ;
net.meta.trainOpts.learningRate = [0.05*ones(1,30) 0.005*ones(1,10) 0.0005*ones(1,5)] ;
net.meta.trainOpts.weightDecay = 0;
net.meta.trainOpts.batchSize = 190 ;
net.meta.trainOpts.numEpochs = numel(net.meta.trainOpts.learningRate) ;

% Fill in default values
net = vl_simplenn_tidy(net) ;

% Switch to DagNN if requested
switch lower(opts.networkType)
    case 'simplenn'
        % done
    case 'simplenn_reg'
        % done
    case 'dagnn'
        net = dagnn.DagNN.fromSimpleNN(net, 'canonicalNames', true) ;
        net.addLayer('error', dagnn.Loss('loss', 'classerror'), ...
            {'prediction','label'}, 'error') ;
    otherwise
        assert(false) ;
end

